<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.toy.toy_petsitter_back.repository.UserRepository">
    <!-- 내 정보 -->
    <select id="getUserInfo" resultType="HashMap" parameterType="Integer">
        SELECT * FROM user WHERE user_seq = #{userKey, jdbcType=INTEGER}
    </select>
    <!-- 내 정보 수정 -->
    <update id="updateUserInfo">
        UPDATE USER SET phone=#{phone, jdbcType=VARCHAR}, zip_code=#{zipCode, jdbcType=VARCHAR}, address=#{address, jdbcType=VARCHAR}, address_detail=#{addressDetail, jdbcType=VARCHAR} WHERE user_seq = #{userKey}
    </update>

    <select id="getUserList" resultType="HashMap">
        SELECT * FROM user;
    </select>

    <select id="getLoginInfo" resultType="HashMap" parameterType="String">
        SELECT * FROM user WHERE email = #{id, jdbcType=VARCHAR}
    </select>

    <select id="getLoginInfoHash" resultType="HashMap" parameterType="String">
        SELECT * FROM user WHERE email = #{id, jdbcType=VARCHAR} AND WITHDRAWAL_YN='N';
    </select>

    <!-- 아이디 존재 여부 확인 -->
    <select id="checkId" resultType="String" parameterType="String">
        SELECT * FROM USER WHERE email = #{id, jdbcType=VARCHAR}
    </select>

    <!-- 회원가입 -->
    <insert id="insertUser" parameterType="HashMap">
        INSERT INTO USER (AUTHORITY, EMAIL, PASSWORD, NAME, PHONE, ZIP_CODE, ADDRESS, ADDRESS_DETAIL, REG_DATE, SITTER_BANK,
                               SITTER_ACCOUNT, SITTER_EXPERIENCE, EXPERIENCE_DETAIL, PET_EXPERIENCE, APPROVAL_STATUS)
        VALUES (#{authority, jdbcType=VARCHAR}, #{email, jdbcType=VARCHAR}, #{password, jdbcType=VARCHAR}, #{name, jdbcType=VARCHAR},
                #{phone, jdbcType=VARCHAR}, #{zipCode, jdbcType=VARCHAR}, #{address1, jdbcType=VARCHAR}, #{address2, jdbcType=VARCHAR},
                now(), #{sitterBank, jdbcType=VARCHAR}, #{sitterAccount, jdbcType=VARCHAR}, #{sitterExperience, jdbcType=VARCHAR}, #{experienceDetail, jdbcType=VARCHAR}
                ,#{petExperience, jdbcType=VARCHAR}, #{approvalStatus, jdbcType=VARCHAR})
    </insert>

    <!-- 비밀번호 오류 횟수 추가 -->
    <update id="addFailCount" >
        UPDATE USER SET fail_count = #{failCount} WHERE email = #{email}
    </update>

    <!-- 계정 잠금 -->
    <update id="lockUser" >
        UPDATE USER SET user_status = 'L', fail_count = #{failCount} WHERE email = #{email}
    </update>

    <!-- 유저키 일치 여부 확인 -->
    <select id="findUserKey" parameterType="Integer" resultType="HashMap">
        SELECT * FROM USER WHERE user_seq = #{userSeq}
    </select>

    <!-- 비밀번호 변경 -->
    <update id="changePassword">
        UPDATE USER SET password = #{password} WHERE email = #{email}
    </update>

    <!-- 토큰 저장 -->
    <insert id="insertToken">
        INSERT INTO USER_TOKEN (user_seq, user_token, issued_date) VALUES(#{userKey}, #{refreshToken}, #{issuedDate})
    </insert>

    <!--R토큰 가져오기 -->
    <select id="selectToken" parameterType="Integer" resultType="String">
        SELECT USER_TOKEN FROM USER_TOKEN WHERE user_seq = #{userSeq}
    </select>
    <!--R토큰 업데이트 -->
    <update id="updateToken">
        UPDATE USER_TOKEN SET user_token = #{refreshToken}, issued_date= #{issuedDate} WHERE user_seq = #{userKey}
    </update>
    <!-- issuedDate 가져오기 -->
    <select id="selectIssuedDate" resultType="String" parameterType="Integer">
        SELECT ISSUED_DATE FROM USER_TOKEN WHERE USER_SEQ = #{userSeq}
    </select>
    <!-- 권한 가져오기 -->
    <select id="selectAuthority" parameterType="Integer" resultType="String">
        SELECT AUTHORITY FROM USER WHERE USER_SEQ = #{userSeq}
    </select>
    <!-- 이메일 가져오기 -->
    <select id="selectEmail" resultType="String" parameterType="Integer">
        SELECT EMAIL FROM USER WHERE USER_SEQ = #{userSeq}
    </select>
    <!-- 마지막 로그인 일자-->
    <update id="updateLastLogin" parameterType="Integer">
        UPDATE USER SET last_login = now() WHERE USER_SEQ = #{userSeq}
    </update>

    <!-- 아이디 존재 여부 확인 with eamil -->
    <select id="checkEmail" resultType="String" parameterType="String">
        SELECT * FROM USER WHERE email = #{email, jdbcType=VARCHAR}
    </select>

    <!-- 아이디 잠금 해제 -->
    <update id="unlock" parameterType="String">
        UPDATE USER SET USER_STATUS='U', FAIL_COUNT=0, UNLOCK_DATE=now() WHERE EMAIL = #{email};
    </update>

    <!-- 회원탈퇴 -->
    <update id="withdrawal" parameterType="Integer">
        UPDATE USER SET WITHDRAWAL_YN ='Y', WITHDRAWAL_DATE =now() WHERE USER_SEQ= #{userSeq}
    </update>

    <!-- 시터 탈퇴 확인 -->
    <select id="checkWithdrawal" parameterType="Integer"  resultType="String">
        SELECT COUNT(*) FROM RESERVATION WHERE  SITTER_SEQ =#{userSeq} AND DATE_FORMAT(check_out, '%Y-%m-%d') <![CDATA[<=]]> CURDATE() AND NOT reservation_status IN ('RR', 'RC', 'RCC', 'RCP', 'RVC');
    </select>

    <!-- 유저 탈퇴 확인 -->
    <select id="checkUserWithdrawal" parameterType="Integer" resultType="String">
        SELECT COUNT(*) FROM RESERVATION WHERE  USER_SEQ =#{userSeq} AND DATE_FORMAT(check_out, '%Y-%m-%d') <![CDATA[<=]]> CURDATE() AND NOT reservation_status IN ('RR', 'RC', 'RCC', 'RCP', 'RVC');
    </select>

</mapper>
